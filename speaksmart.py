import logging
import os
import threading # –î–ª—è –∑–∞–ø—É—Å–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
from http.server import BaseHTTPRequestHandler, HTTPServer # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
from urllib.parse import urlparse # –î–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø—É—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞

# --- –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ ---
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    # --- –ù–û–í–´–ô –ò–ú–ü–û–†–¢ ---
    ConversationHandler,
    CallbackQueryHandler # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
)

import gemini_api # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ gemini_api.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY") # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ –≤ ConversationHandler, –Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–∑–∂–µ

# –ü–æ—Ä—Ç –¥–ª—è Health Check —Å–µ—Ä–≤–µ—Ä–∞ (Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT)
HEALTH_CHECK_PORT = int(os.environ.get('PORT', 8080)) 

# --- –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–ô –î–ò–ê–õ–û–ì–ê ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ú—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
# GET_TEXT_FOR_CORRECTION: –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# CHOOSE_STYLE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.
# DESCRIBE_ADDRESSEE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å–∞—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è.
# POST_PROCESSING_MENU: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –º–µ–Ω—é –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
GET_TEXT_FOR_CORRECTION, CHOOSE_STYLE, DESCRIBE_ADDRESSEE, POST_PROCESSING_MENU = range(4)


# --- –ö–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Health Check ---
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urlparse(self.path)
        if parsed_path.path == '/healthz': 
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Not Found")

def run_health_check_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    try:
        server_address = ('', HEALTH_CHECK_PORT)
        httpd = HTTPServer(server_address, HealthCheckHandler)
        logger.info(f"–ó–∞–ø—É—Å–∫ Health Check HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {HEALTH_CHECK_PORT}...")
        httpd.serve_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ Health Check HTTP-—Å–µ—Ä–≤–µ—Ä–∞: {e}", exc_info=True)
# --- –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞ ---

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–∑–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    user_name = update.effective_user.first_name
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø SpeakSmartBot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤. "
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –∑–≤—É—á–∞–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –≤–µ–∂–ª–∏–≤–æ –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "üîπ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        "üîπ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–ª–æ–≤–æ–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π).\n"
        "üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å, –µ—Å–ª–∏ —Ç—ã –æ–ø–∏—à–µ—à—å –∞–¥—Ä–µ—Å–∞—Ç–∞.\n"
        "üîπ –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –º—è–≥—á–µ –∏–ª–∏ —Å—Ç—Ä–æ–∂–µ).\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?"
    )
    keyboard = [
        [InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç üìù", callback_data="start_correction")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup
    )

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–ß–ê–õ–ê –î–ò–ê–õ–û–ì–ê (ENTRY POINT –ü–û–°–õ–ï –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–ö–ò) ---
# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–ß–ê–õ–ê –î–ò–ê–õ–û–ì–ê (ENTRY POINT –ü–û–°–õ–ï –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–ö–ò) - –í–ê–†–ò–ê–ù–¢ –ê ---
async def request_text_for_correction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç üìù".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–∏–∞–ª–æ–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GET_TEXT_FOR_CORRECTION.
    """
    query = update.callback_query
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram
    await query.answer() 
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
    )
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–µ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å —Å–Ω–æ–≤–∞.
    # –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.
    # –î–ª—è –ø–æ–ª–Ω–æ–π —á–∏—Å—Ç–æ—Ç—ã –ª—É—á—à–µ —É–±—Ä–∞—Ç—å:
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception as e:
        # –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ,
        # –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–ª–æ—É. –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º.
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    return GET_TEXT_FOR_CORRECTION

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø-–û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê ---
async def received_text_for_correction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–∞—Ö–æ–¥—è—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GET_TEXT_FOR_CORRECTION.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–∏–∞–ª–æ–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSE_STYLE.
    """
    user_message = update.message.text
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç chat_id {chat_id}: '{user_message}'")
    
    context.user_data['text_to_correct'] = user_message # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    keyboard = [
        [InlineKeyboardButton("–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å", callback_data="style_business")],
        [InlineKeyboardButton("–£—á–µ–±–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="style_academic")],
        [InlineKeyboardButton("–õ–∏—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ", callback_data="style_personal")],
        [InlineKeyboardButton("–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="style_simplified")],
        [InlineKeyboardButton("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è", callback_data="style_auto")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü–æ–Ω—è–ª —Ç–µ–±—è! –ü–æ–ª—É—á–∏–ª —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): \"{user_message[:50]}...\"\n\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )
    
    return CHOOSE_STYLE # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –°–¢–ò–õ–Ø (–ü–û–ö–ê –ó–ê–ì–õ–£–®–ö–ê) ---
# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø-–û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –°–¢–ò–õ–Ø ---
async def style_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ–ø–∏—Å–∞–Ω–∏—é –∞–¥—Ä–µ—Å–∞—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    
    style_choice = query.data # –≠—Ç–æ –±—É–¥–µ—Ç callback_data –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'style_business'
    context.user_data['chosen_style'] = style_choice 
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {style_choice}")

    text_to_correct = context.user_data.get('text_to_correct')

    if not text_to_correct:
        await query.edit_message_text(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    if style_choice in ["style_business", "style_academic", "style_personal", "style_simplified"]:
        # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞ Gemini –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
        await query.edit_message_text(text=f"–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {style_choice}. –ú–∏–Ω—É—Ç–æ—á–∫—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π —Ç–µ–∫—Å—Ç...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–∞—Ç—å Gemini –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞
        style_prompt_instruction = ""
        if style_choice == "style_business":
            style_prompt_instruction = "–≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ"
        elif style_choice == "style_academic":
            style_prompt_instruction = "–≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–º –∏–ª–∏ —É—á–µ–±–Ω–æ–º —Å—Ç–∏–ª–µ"
        elif style_choice == "style_personal":
            style_prompt_instruction = "–≤ —Å—Ç–∏–ª–µ –ª–∏—á–Ω–æ–≥–æ, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"
        elif style_choice == "style_simplified":
            style_prompt_instruction = "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —É–ø—Ä–æ—Å—Ç–∏–≤ —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        prompt_for_gemini = (
            f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç {style_prompt_instruction}, "
            f"—Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª: \"{text_to_correct}\"\n\n"
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, "
            "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
        )
        
        logger.info(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini: {prompt_for_gemini}")

        if not GEMINI_API_KEY:
            logger.error("GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è style_chosen.")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º context.bot.send_message —Ç–∞–∫ –∫–∞–∫ query.edit_message_text —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–ª—è. –ö–ª—é—á API –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return ConversationHandler.END
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º Gemini API
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            response_text = gemini_api.ask_gemini(prompt_for_gemini, GEMINI_API_KEY)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∑–∞–º–µ–Ω—è–µ–º "–ú–∏–Ω—É—Ç–æ—á–∫—É...")
            # –¢–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ query.edit_message_text, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Å–Ω–æ–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
            # –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ. 
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º edit_message_text –æ—Ç —ç—Ç–æ–≥–æ –∂–µ query.
            # –û–¥–Ω–∞–∫–æ, –±–æ–ª–µ–µ —á–∏—Å—Ç—ã–π –ø–æ–¥—Ö–æ–¥ - –µ—Å–ª–∏ edit_message_text –±—ã–ª –≤—ã—à–µ, —Ç–æ –∑–¥–µ—Å—å —Ç–æ–∂–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ query.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
            if query.message:
                 await context.bot.edit_message_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ú–∏–Ω—É—Ç–æ—á–∫—É..."
                    text=f"–í–æ—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{response_text}",
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id
                )
            else: # –ï—Å–ª–∏ query.message –ø–æ—á–µ–º—É-—Ç–æ None, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–í–æ—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{response_text}"
                )
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Gemini (—Å—Ç–∏–ª—å {style_choice}): {response_text}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ gemini_api.ask_gemini –¥–ª—è —Å—Ç–∏–ª—è {style_choice}: {e}", exc_info=True)
            if query.message:
                await context.bot.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id
                )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    elif style_choice == "style_auto":
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –º—ã —Ä–µ–∞–ª–∏–∑—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–¥—à–∞–≥–µ
        await query.edit_message_text(
            text="–¢—ã –≤—ã–±—Ä–∞–ª '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è'. "
                 "–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º—ã –¥–æ–±–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–º! –ü–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∞—é –¥–∏–∞–ª–æ–≥."
        )
        return ConversationHandler.END # –ü–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º
    
    else:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ callback_data –∫–∞–∫–æ–π-—Ç–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è.")
        return ConversationHandler.END
    
# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ú–ï–ù–´ –î–ò–ê–õ–û–ì–ê ---
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –æ—á–∏—â–∞–µ—Ç user_data."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start."
    )
    # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    context.user_data.clear()
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞."""
    await update.message.reply_text(f"–ë–æ—Ç –æ–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! Health check —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω Render) —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {HEALTH_CHECK_PORT}.")

# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_message, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤ —Ç–≤–æ–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ñ–∞–π–ª–µ,
# —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–µ–Ω –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
# –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ ConversationHandler –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö.
# –ï—Å–ª–∏ –µ–≥–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –æ–Ω –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GET_TEXT_FOR_CORRECTION.
# –ü–æ—ç—Ç–æ–º—É –æ–Ω –∑–¥–µ—Å—å –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω/—É–¥–∞–ª–µ–Ω.

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ health check —Å–µ—Ä–≤–µ—Ä–∞."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not TELEGRAM_TOKEN:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    # GEMINI_API_KEY –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö, –ø–æ–∫–∞ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ConversationHandler
    # if not GEMINI_API_KEY:
    #     logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    #     return

    logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
    
    health_thread = threading.Thread(target=run_health_check_server, daemon=True)
    health_thread.start()
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
# --- –ù–ê–°–¢–†–û–ô–ö–ê ConversationHandler ---
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(request_text_for_correction, pattern='^start_correction$')
        ],
        states={
            GET_TEXT_FOR_CORRECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_text_for_correction)],
            CHOOSE_STYLE: [
                # –ú—ã –æ–∂–∏–¥–∞–µ–º callback_data, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å "style_"
                CallbackQueryHandler(style_chosen, pattern='^style_(business|academic|personal|simplified|auto)$')
            ],
            # ... –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥—É—Ç DESCRIBE_ADDRESSEE, POST_PROCESSING_MENU –∏ —Ç.–¥. ...
        },
        fallbacks=[
            CommandHandler('cancel', cancel_conversation)
        ],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ü–ï–†–ï–î –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏,
    # –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å —Ç–µ –∂–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—â–∏–π MessageHandler –¥–ª—è —Ç–µ–∫—Å—Ç–∞).
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ /start –∏ /status.
    # –û–Ω–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç ConversationHandler.
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    
    logger.info("–ë–æ—Ç Telegram —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞...")
    try:
        application.run_polling() # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ Telegram-–±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    main()
