import logging
import os
# import threading # threading —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ health_checker
# from http.server import BaseHTTPRequestHandler, HTTPServer # –≠—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å
# from urllib.parse import urlparse # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å

# --- –ò–ú–ü–û–†–¢–´ TELEGRAM ---
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
# ReplyKeyboardMarkup –∏ KeyboardButton –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç –Ω–∞ –±—É–¥—É—â–µ–µ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
from telegram import ReplyKeyboardMarkup, KeyboardButton 
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)

# --- –ò–ú–ü–û–†–¢–´ –ù–ê–®–ò–• –ú–û–î–£–õ–ï–ô ---
import gemini_api 
from health_checker import start_health_check_server_in_thread # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–æ–¥—É–ª—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
# HEALTH_CHECK_PORT –±–æ–ª—å—à–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ health_checker.py

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–ô –î–ò–ê–õ–û–ì–ê ---
GET_TEXT_FOR_CORRECTION, CHOOSE_STYLE, DESCRIBE_ADDRESSEE, POST_PROCESSING_MENU = range(4)

# --- –ö–æ–¥ –¥–ª—è Health Check —Å–µ—Ä–≤–µ—Ä–∞ –£–î–ê–õ–ï–ù –æ—Ç—Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤ health_checker.py ---

# --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_name = update.effective_user.first_name
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø SpeakSmartBot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤. "
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –∑–≤—É—á–∞–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –≤–µ–∂–ª–∏–≤–æ –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "üîπ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        "üîπ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–ª–æ–≤–æ–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π).\n"
        "üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å, –µ—Å–ª–∏ —Ç—ã –æ–ø–∏—à–µ—à—å –∞–¥—Ä–µ—Å–∞—Ç–∞.\n"
        "üîπ –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –º—è–≥—á–µ –∏–ª–∏ —Å—Ç—Ä–æ–∂–µ).\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?"
    )
    keyboard = [[InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç üìù", callback_data="start_correction")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def request_text_for_correction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
    )
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    return GET_TEXT_FOR_CORRECTION

async def received_text_for_correction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç chat_id {update.effective_chat.id}: '{user_message}'")
    context.user_data['text_to_correct'] = user_message
    keyboard = [
        [InlineKeyboardButton("–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å", callback_data="style_business")],
        [InlineKeyboardButton("–£—á–µ–±–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="style_academic")],
        [InlineKeyboardButton("–õ–∏—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ", callback_data="style_personal")],
        [InlineKeyboardButton("–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="style_simplified")],
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤ —Ñ–∞–π–ª–µ
        [InlineKeyboardButton("–Ø —Å–∞–º —É–∫–∞–∂—É –∞–¥—Ä–µ—Å–∞—Ç–∞", callback_data="style_auto")], 
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü–æ–Ω—è–ª —Ç–µ–±—è! –ü–æ–ª—É—á–∏–ª —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): \"{user_message[:50]}...\"\n\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return CHOOSE_STYLE

async def style_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    style_choice = query.data
    context.user_data['chosen_style'] = style_choice
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {style_choice}")
    text_to_correct = context.user_data.get('text_to_correct')

    if not text_to_correct:
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END

    if style_choice == "style_auto":
        await query.edit_message_text(
            text="–¢—ã –≤—ã–±—Ä–∞–ª —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞—Ç–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n" # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–µ
                 "–ß—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                 "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞—á–∞–ª—å–Ω–∏–∫—É', '–±–ª–∏–∑–∫–æ–º—É –¥—Ä—É–≥—É', '–∫–ª–∏–µ–Ω—Ç—É', '—É—á–∏—Ç–µ–ª—é', '–≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Å—Ç–∞–Ω—Ü–∏—é')."
        )
        return DESCRIBE_ADDRESSEE
    
    await query.edit_message_text(text=f"–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {style_choice}. –ú–∏–Ω—É—Ç–æ—á–∫—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π —Ç–µ–∫—Å—Ç...")
    style_prompt_instruction = ""
    if style_choice == "style_business": style_prompt_instruction = "–≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ"
    elif style_choice == "style_academic": style_prompt_instruction = "–≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–º –∏–ª–∏ —É—á–µ–±–Ω–æ–º —Å—Ç–∏–ª–µ"
    elif style_choice == "style_personal": style_prompt_instruction = "–≤ —Å—Ç–∏–ª–µ –ª–∏—á–Ω–æ–≥–æ, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"
    elif style_choice == "style_simplified": style_prompt_instruction = "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —É–ø—Ä–æ—Å—Ç–∏–≤ —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
    
    prompt_for_gemini = (
        f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç {style_prompt_instruction}, "
        f"—Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª: \"{text_to_correct}\"\n\n"
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, "
        "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
    )
    logger.info(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini: {prompt_for_gemini}")

    if not GEMINI_API_KEY:
        logger.error("GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è style_chosen.")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–ª—è. –ö–ª—é—á API –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        response_text = gemini_api.ask_gemini(prompt_for_gemini, GEMINI_API_KEY)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –î–õ–Ø –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ò ---
        context.user_data['last_gemini_response'] = response_text 

        post_process_keyboard_inline = [[
            InlineKeyboardButton("–ú—è–≥—á–µ", callback_data="adjust_softer"),
            InlineKeyboardButton("–ñ–µ—Å—Ç—á–µ", callback_data="adjust_harder"),
            InlineKeyboardButton("–§–æ—Ä–º–∞–ª—å–Ω–µ–µ", callback_data="adjust_more_formal"),
        ]]
        reply_markup_inline = InlineKeyboardMarkup(post_process_keyboard_inline)
        
        message_to_edit = f"–í–æ—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{response_text}\n\n–ö–∞–∫ —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ú–æ–∂–µ–º –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å:"
        
        if query.message:
            await context.bot.edit_message_text(
                text=message_to_edit,
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                reply_markup=reply_markup_inline
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_to_edit,
                reply_markup=reply_markup_inline
            )
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Gemini (—Å—Ç–∏–ª—å {style_choice}): {response_text}. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –º–µ–Ω—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return POST_PROCESSING_MENU # –ü–ï–†–ï–•–û–î–ò–ú –í –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ gemini_api.ask_gemini –¥–ª—è —Å—Ç–∏–ª—è {style_choice}: {e}", exc_info=True)
        error_message_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if query.message: await context.bot.edit_message_text(text=error_message_text, chat_id=query.message.chat_id, message_id=query.message.message_id)
        else: await context.bot.send_message(chat_id=update.effective_chat.id, text=error_message_text)
        return ConversationHandler.END

async def addressee_described(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    addressee_description = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞—Ç–∞ –æ—Ç chat_id {update.effective_chat.id}: '{addressee_description}'")
    context.user_data['addressee_description'] = addressee_description
    text_to_correct = context.user_data.get('text_to_correct')

    if not text_to_correct:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END

    await update.message.reply_text("–ü–æ–Ω—è–ª —Ç–µ–±—è! –ü–æ–¥–±–∏—Ä–∞—é —Å—Ç–∏–ª—å –∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ –∞–¥—Ä–µ—Å–∞—Ç–∞. –ú–∏–Ω—É—Ç–æ—á–∫—É...")
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    prompt_for_gemini = (
        f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–æ–±—Ä–∞–≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å "
        f"–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞—Ç–∞: '{addressee_description}'. "
        f"–°–æ—Ö—Ä–∞–Ω—è–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª —Ç–µ–∫—Å—Ç–∞. –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{text_to_correct}\"\n\n"
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, "
        "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
    )
    logger.info(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ): {prompt_for_gemini}")

    if not GEMINI_API_KEY:
        logger.error("GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è addressee_described.")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è. –ö–ª—é—á API –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
        
    try:
        response_text = gemini_api.ask_gemini(prompt_for_gemini, GEMINI_API_KEY)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –î–õ–Ø –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ò ---
        context.user_data['last_gemini_response'] = response_text

        post_process_keyboard_inline = [[
            InlineKeyboardButton("–ú—è–≥—á–µ", callback_data="adjust_softer"),
            InlineKeyboardButton("–ñ–µ—Å—Ç—á–µ", callback_data="adjust_harder"),
            InlineKeyboardButton("–§–æ—Ä–º–∞–ª—å–Ω–µ–µ", callback_data="adjust_more_formal"),
        ]]
        reply_markup_inline = InlineKeyboardMarkup(post_process_keyboard_inline)
        
        message_to_send = f"–í–æ—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å—Ç–∏–ª—å –ø–æ–¥–æ–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è '{addressee_description}'):\n\n{response_text}\n\n–ö–∞–∫ —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ú–æ–∂–µ–º –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å:"
        
        await update.message.reply_text(text=message_to_send, reply_markup=reply_markup_inline)
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Gemini (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è '{addressee_description}'): {response_text}. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –º–µ–Ω—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return POST_PROCESSING_MENU # –ü–ï–†–ï–•–û–î–ò–ú –í –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ gemini_api.ask_gemini –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ò (–ü–û–ö–ê –ó–ê–ì–õ–£–®–ö–ê) ---
async def post_processing_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ—Ç –æ –≤—ã–±–æ—Ä–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
    """
    query = update.callback_query
    await query.answer()
    
    action_choice = query.data # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'adjust_softer'
    # –ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º 'post_process_action' –≤ user_data, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    
    last_response = context.user_data.get('last_gemini_response', "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏: {action_choice} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: \"{last_response[:30]}...\"")
    
    await query.edit_message_text(
        text=f"–¢—ã –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action_choice} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: \"{last_response[:50]}...\".\n"
             "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ó–∞–≤–µ—Ä—à–∞—é –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∞."
    )
    return ConversationHandler.END # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start.")
    context.user_data.clear()
    return ConversationHandler.END

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # HEALTH_CHECK_PORT —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ health_checker.py, –Ω–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–∂–Ω–æ –µ–≥–æ –∑–¥–µ—Å—å —É–ø–æ–º—è–Ω—É—Ç—å
    # –∏–ª–∏ —É–±—Ä–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—É—Ç–∞–Ω–∏—Ü—É.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –Ω–æ –≤ –∏–¥–µ–∞–ª–µ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞.
    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ—Ä—Ç –∏–∑ health_checker –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ health_check –∞–∫—Ç–∏–≤–µ–Ω.
    health_check_port_display = context.bot_data.get('health_check_port', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º') # –ü—Ä–∏–º–µ—Ä, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ö—Ä–∞–Ω–∏—Ç—å
    await update.message.reply_text(f"–ë–æ—Ç –æ–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! Health check —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω.")


def main() -> None:
    if not TELEGRAM_TOKEN:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º Health Check –∏–∑ –º–æ–¥—É–ª—è ---
    # health_thread = threading.Thread(target=run_health_check_server, daemon=True) # –°–¢–ê–†–´–ô –ö–û–î
    # health_thread.start() # –°–¢–ê–†–´–ô –ö–û–î
    start_health_check_server_in_thread() # –ù–û–í–´–ô –ö–û–î
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —á–µ–≥–æ-—Ç–æ, –Ω–æ –¥–ª—è daemon=True —ç—Ç–æ –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º POST_PROCESSING_MENU –≤ ConversationHandler ---
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(request_text_for_correction, pattern='^start_correction$')],
        states={
            GET_TEXT_FOR_CORRECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_text_for_correction)],
            CHOOSE_STYLE: [CallbackQueryHandler(style_chosen, pattern='^style_(business|academic|personal|simplified|auto)$')],
            DESCRIBE_ADDRESSEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, addressee_described)],
            POST_PROCESSING_MENU: [ # –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö
                CallbackQueryHandler(post_processing_action, pattern='^adjust_(softer|harder|more_formal)$')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    
    logger.info("–ë–æ—Ç Telegram —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞...")
    try:
        application.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ Telegram-–±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    main()
